package pubsub

import (
	"context"
	"encoding/json"
	"log"

	amqp "github.com/rabbitmq/amqp091-go"
)

type QueueType int

const (
	DURABLE = iota
	TRANSIENT
)

func PublishJson[T any](ch *amqp.Channel, exchange, key string, val T) error {
	bytes, err := json.Marshal(val)
	if err != nil {
		return err
	}
	ch.PublishWithContext(context.Background(), exchange, key, false, false, amqp.Publishing{
		ContentType: "application/json",
		Body:        bytes,
	})

	return nil
}

func SubscribeJSON[T any](
	conn *amqp.Connection,
	exchange,
	queueName,
	key string,
	queueType QueueType,
	handler func(T),
) error {
	// Check if exist
	chann, queue, err := DeclareAndBind(conn, exchange, queueName, key, queueType)
	if err != nil {
		return err
	}

	// We get a delivery chanel with a consumer name (if "" it will be autogenerated)
	deliveryChannel, err := chann.Consume(queue.Name, "", false, false, false, false, nil)
	if err != nil {
		return err
	}
	go func() {
		for msg := range deliveryChannel {
			var v T
			err = json.Unmarshal(msg.Body, &v)
			if err != nil {
				log.Printf("Error found: %s", err)
				continue
			}
			handler(v)
			// Acknowledge the message and eliminate form queue
			msg.Ack(false)
		}
	}()
	return nil
}

func DeclareAndBind(
	conn *amqp.Connection,
	exchange,
	queueName,
	key string,
	simpleQueueType QueueType,
) (*amqp.Channel, amqp.Queue, error) {
	chann, err := conn.Channel()
	if err != nil {
		return nil, amqp.Queue{}, err
	}

	// Durable default
	durable := true
	autoDelete := false
	exclusive := false

	if simpleQueueType == TRANSIENT {
		durable = false
		autoDelete = true
		exclusive = true
	}
	queue, err := chann.QueueDeclare(queueName, durable, autoDelete, exclusive, false, nil)
	if err != nil {
		return nil, amqp.Queue{}, err
	}

	chann.QueueBind(queueName, key, exchange, false, nil)

	return chann, queue, nil
}
